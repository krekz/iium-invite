generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  matricNo  String  @id @unique
  name      String
  email     String  @unique
  iiumEmail String  @unique
  image     String
  events    Event[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bookmarks Bookmark[]

  @@index([email])
}

model Event {
  id                  String        @id @unique
  title               String        @db.VarChar(255)
  description         String
  poster_url          String[]
  date                DateTime // event date or start date
  registrationEndDate DateTime?
  campus              String
  location            String
  organizer           String
  fee                 String?
  registration_link   String?
  categories          String[]
  has_starpoints      Boolean
  contacts            Contact[]
  isActive            Boolean       @default(true)
  isRecruiting        Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  Author              User?         @relation(fields: [authorId], references: [matricNo])
  authorId            String?
  bookmarks           Bookmark[]
  reports             EventReport[]

  @@index([registrationEndDate, isActive]) // use in cron api
  @@index([date, isActive]) // use in cron api
  @@index([isActive])
  @@index([authorId])
}

model Contact {
  id      Int    @id @default(autoincrement())
  name    String
  phone   String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [matricNo], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model EventReport {
  id         String   @id @default(cuid())
  eventId    String
  status     String
  type       String
  reason     String
  reportedBy String
  createdAt  DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([eventId, status])
}
