generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified Boolean?  @default(false)
  iiumEmail     String?   @unique // verified email in order user to post event
  matricNumber  String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        Event[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bookmarks         Bookmark[]
  VerificationToken VerificationToken?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id        String   @id @default(cuid())
  tokenHash String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  isValid   Boolean  @default(true)
}

model Event {
  id                  String     @id @unique
  title               String     @db.VarChar(255)
  description         String
  poster_url          String[]
  date                DateTime // event date or start date
  registrationEndDate DateTime?
  campus              String
  location            String
  organizer           String
  fee                 String?
  registration_link   String?
  categories          String[]
  has_starpoints      Boolean
  contacts            Contact[]
  isActive            Boolean    @default(true)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  Author              User?      @relation(fields: [authorId], references: [id])
  authorId            String?
  bookmarks           Bookmark[]

  @@index([registrationEndDate, isActive]) // use in cron api
  @@index([date, isActive]) // use in cron api
  @@index([isActive])
  @@index([authorId])
}

model Contact {
  id      Int    @id @default(autoincrement())
  name    String
  phone   String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}
